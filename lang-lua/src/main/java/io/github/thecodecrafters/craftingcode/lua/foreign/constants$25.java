// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
import static jdk.incubator.foreign.MemoryLayouts.ADDRESS;

class constants$25 {

    static final FunctionDescriptor luaL_requiref$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle luaL_requiref$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_requiref",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$25.luaL_requiref$FUNC, false
    );
    static final FunctionDescriptor luaL_buffinit$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle luaL_buffinit$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_buffinit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$25.luaL_buffinit$FUNC, false
    );
    static final FunctionDescriptor luaL_prepbuffsize$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        ADDRESS
    );
    static final MethodHandle luaL_prepbuffsize$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_prepbuffsize",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        constants$25.luaL_prepbuffsize$FUNC, false
    );
    static final FunctionDescriptor luaL_addlstring$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        ADDRESS
    );
    static final MethodHandle luaL_addlstring$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_addlstring",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        constants$25.luaL_addlstring$FUNC, false
    );
    static final FunctionDescriptor luaL_addstring$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle luaL_addstring$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_addstring",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$25.luaL_addstring$FUNC, false
    );
    static final FunctionDescriptor luaL_addvalue$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle luaL_addvalue$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_addvalue",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$25.luaL_addvalue$FUNC, false
    );
}



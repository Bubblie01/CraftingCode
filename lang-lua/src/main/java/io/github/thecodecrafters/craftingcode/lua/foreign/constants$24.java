// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$24 {

    static final FunctionDescriptor luaL_newstate$FUNC = FunctionDescriptor.of(C_POINTER);
    static final MethodHandle luaL_newstate$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_newstate",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        constants$24.luaL_newstate$FUNC, false
    );
    static final FunctionDescriptor luaL_len$FUNC = FunctionDescriptor.of(C_LONG_LONG,
        C_POINTER,
        C_INT
    );
    static final MethodHandle luaL_len$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_len",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        constants$24.luaL_len$FUNC, false
    );
    static final FunctionDescriptor luaL_gsub$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle luaL_gsub$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_gsub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$24.luaL_gsub$FUNC, false
    );
    static final FunctionDescriptor luaL_setfuncs$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle luaL_setfuncs$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_setfuncs",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$24.luaL_setfuncs$FUNC, false
    );
    static final FunctionDescriptor luaL_getsubtable$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle luaL_getsubtable$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_getsubtable",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$24.luaL_getsubtable$FUNC, false
    );
    static final FunctionDescriptor luaL_traceback$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle luaL_traceback$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_traceback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$24.luaL_traceback$FUNC, false
    );
}



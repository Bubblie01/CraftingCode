// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$2 {

    static final FunctionDescriptor lua_newthread$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle lua_newthread$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_newthread",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$2.lua_newthread$FUNC, false
    );
    static final FunctionDescriptor lua_atpanic$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle lua_atpanic$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_atpanic",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$2.lua_atpanic$FUNC, false
    );
    static final FunctionDescriptor lua_version$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle lua_version$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_version",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$2.lua_version$FUNC, false
    );
    static final FunctionDescriptor lua_absindex$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_absindex$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_absindex",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$2.lua_absindex$FUNC, false
    );
    static final FunctionDescriptor lua_gettop$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle lua_gettop$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_gettop",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$2.lua_gettop$FUNC, false
    );
    static final FunctionDescriptor lua_settop$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_settop$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_settop",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$2.lua_settop$FUNC, false
    );
}



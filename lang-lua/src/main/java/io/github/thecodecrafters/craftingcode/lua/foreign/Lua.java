// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;

import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
import static jdk.incubator.foreign.MemoryAddress.NULL;
import static jdk.incubator.foreign.MemoryLayouts.ADDRESS;

public class Lua  {

    static {
        System.loadLibrary("lua");
    }

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */ Lua() {}
    public static int LUAI_BITSINT() {
        return (int)32L;
    }
    public static int LUA_INT_INT() {
        return (int)1L;
    }
    public static int LUA_INT_LONG() {
        return (int)2L;
    }
    public static int LUA_INT_LONGLONG() {
        return (int)3L;
    }
    public static int LUA_FLOAT_FLOAT() {
        return (int)1L;
    }
    public static int LUA_FLOAT_DOUBLE() {
        return (int)2L;
    }
    public static int LUA_FLOAT_LONGDOUBLE() {
        return (int)3L;
    }
    public static int LUAI_MAXSTACK() {
        return (int)1000000L;
    }
    public static int LUA_IDSIZE() {
        return (int)60L;
    }
    public static int LUA_VERSION_NUM() {
        return (int)503L;
    }
    public static int LUA_OK() {
        return (int)0L;
    }
    public static int LUA_YIELD() {
        return (int)1L;
    }
    public static int LUA_ERRRUN() {
        return (int)2L;
    }
    public static int LUA_ERRSYNTAX() {
        return (int)3L;
    }
    public static int LUA_ERRMEM() {
        return (int)4L;
    }
    public static int LUA_ERRGCMM() {
        return (int)5L;
    }
    public static int LUA_ERRERR() {
        return (int)6L;
    }
    public static int LUA_TNIL() {
        return (int)0L;
    }
    public static int LUA_TBOOLEAN() {
        return (int)1L;
    }
    public static int LUA_TLIGHTUSERDATA() {
        return (int)2L;
    }
    public static int LUA_TNUMBER() {
        return (int)3L;
    }
    public static int LUA_TSTRING() {
        return (int)4L;
    }
    public static int LUA_TTABLE() {
        return (int)5L;
    }
    public static int LUA_TFUNCTION() {
        return (int)6L;
    }
    public static int LUA_TUSERDATA() {
        return (int)7L;
    }
    public static int LUA_TTHREAD() {
        return (int)8L;
    }
    public static int LUA_NUMTAGS() {
        return (int)9L;
    }
    public static int LUA_MINSTACK() {
        return (int)20L;
    }
    public static int LUA_RIDX_MAINTHREAD() {
        return (int)1L;
    }
    public static int LUA_RIDX_GLOBALS() {
        return (int)2L;
    }
    public static int LUA_OPADD() {
        return (int)0L;
    }
    public static int LUA_OPSUB() {
        return (int)1L;
    }
    public static int LUA_OPMUL() {
        return (int)2L;
    }
    public static int LUA_OPMOD() {
        return (int)3L;
    }
    public static int LUA_OPPOW() {
        return (int)4L;
    }
    public static int LUA_OPDIV() {
        return (int)5L;
    }
    public static int LUA_OPIDIV() {
        return (int)6L;
    }
    public static int LUA_OPBAND() {
        return (int)7L;
    }
    public static int LUA_OPBOR() {
        return (int)8L;
    }
    public static int LUA_OPBXOR() {
        return (int)9L;
    }
    public static int LUA_OPSHL() {
        return (int)10L;
    }
    public static int LUA_OPSHR() {
        return (int)11L;
    }
    public static int LUA_OPUNM() {
        return (int)12L;
    }
    public static int LUA_OPBNOT() {
        return (int)13L;
    }
    public static int LUA_OPEQ() {
        return (int)0L;
    }
    public static int LUA_OPLT() {
        return (int)1L;
    }
    public static int LUA_OPLE() {
        return (int)2L;
    }
    public static int LUA_GCSTOP() {
        return (int)0L;
    }
    public static int LUA_GCRESTART() {
        return (int)1L;
    }
    public static int LUA_GCCOLLECT() {
        return (int)2L;
    }
    public static int LUA_GCCOUNT() {
        return (int)3L;
    }
    public static int LUA_GCCOUNTB() {
        return (int)4L;
    }
    public static int LUA_GCSTEP() {
        return (int)5L;
    }
    public static int LUA_GCSETPAUSE() {
        return (int)6L;
    }
    public static int LUA_GCSETSTEPMUL() {
        return (int)7L;
    }
    public static int LUA_GCISRUNNING() {
        return (int)9L;
    }
    public static int LUA_HOOKCALL() {
        return (int)0L;
    }
    public static int LUA_HOOKRET() {
        return (int)1L;
    }
    public static int LUA_HOOKLINE() {
        return (int)2L;
    }
    public static int LUA_HOOKCOUNT() {
        return (int)3L;
    }
    public static int LUA_HOOKTAILCALL() {
        return (int)4L;
    }
    public static int ERIS_VERSION_NUM() {
        return (int)101L;
    }
    public static ValueLayout lua_Number = C_DOUBLE;
    public static ValueLayout lua_Integer = C_LONG_LONG;
    public static ValueLayout lua_KContext = ADDRESS;
    public static MethodHandle lua_newstate$MH() {
        return RuntimeHelper.requireNonNull(constants$1.lua_newstate$MH,"lua_newstate");
    }
    public static MemoryAddress lua_newstate ( Addressable f,  Addressable ud) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.lua_newstate$MH, "lua_newstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(f.address(), ud.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_close$MH() {
        return RuntimeHelper.requireNonNull(constants$1.lua_close$MH,"lua_close");
    }
    public static void lua_close ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.lua_close$MH, "lua_close");
        try {
            mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_newthread$MH() {
        return RuntimeHelper.requireNonNull(constants$2.lua_newthread$MH,"lua_newthread");
    }
    public static MemoryAddress lua_newthread ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.lua_newthread$MH, "lua_newthread");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_atpanic$MH() {
        return RuntimeHelper.requireNonNull(constants$2.lua_atpanic$MH,"lua_atpanic");
    }
    public static MemoryAddress lua_atpanic ( Addressable L,  Addressable panicf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.lua_atpanic$MH, "lua_atpanic");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), panicf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_version$MH() {
        return RuntimeHelper.requireNonNull(constants$2.lua_version$MH,"lua_version");
    }
    public static MemoryAddress lua_version ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.lua_version$MH, "lua_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_absindex$MH() {
        return RuntimeHelper.requireNonNull(constants$2.lua_absindex$MH,"lua_absindex");
    }
    public static int lua_absindex ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.lua_absindex$MH, "lua_absindex");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_gettop$MH() {
        return RuntimeHelper.requireNonNull(constants$2.lua_gettop$MH,"lua_gettop");
    }
    public static int lua_gettop ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.lua_gettop$MH, "lua_gettop");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_settop$MH() {
        return RuntimeHelper.requireNonNull(constants$2.lua_settop$MH,"lua_settop");
    }
    public static void lua_settop ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.lua_settop$MH, "lua_settop");
        try {
            mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$3.lua_pushvalue$MH,"lua_pushvalue");
    }
    public static void lua_pushvalue ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.lua_pushvalue$MH, "lua_pushvalue");
        try {
            mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_rotate$MH() {
        return RuntimeHelper.requireNonNull(constants$3.lua_rotate$MH,"lua_rotate");
    }
    public static void lua_rotate ( Addressable L,  int idx,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.lua_rotate$MH, "lua_rotate");
        try {
            mh$.invokeExact(L.address(), idx, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$3.lua_copy$MH,"lua_copy");
    }
    public static void lua_copy ( Addressable L,  int fromidx,  int toidx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.lua_copy$MH, "lua_copy");
        try {
            mh$.invokeExact(L.address(), fromidx, toidx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_checkstack$MH() {
        return RuntimeHelper.requireNonNull(constants$3.lua_checkstack$MH,"lua_checkstack");
    }
    public static int lua_checkstack ( Addressable L,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.lua_checkstack$MH, "lua_checkstack");
        try {
            return (int)mh$.invokeExact(L.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_xmove$MH() {
        return RuntimeHelper.requireNonNull(constants$3.lua_xmove$MH,"lua_xmove");
    }
    public static void lua_xmove ( Addressable from,  Addressable to,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.lua_xmove$MH, "lua_xmove");
        try {
            mh$.invokeExact(from.address(), to.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_isnumber$MH() {
        return RuntimeHelper.requireNonNull(constants$3.lua_isnumber$MH,"lua_isnumber");
    }
    public static int lua_isnumber ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.lua_isnumber$MH, "lua_isnumber");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_isstring$MH() {
        return RuntimeHelper.requireNonNull(constants$4.lua_isstring$MH,"lua_isstring");
    }
    public static int lua_isstring ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.lua_isstring$MH, "lua_isstring");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_iscfunction$MH() {
        return RuntimeHelper.requireNonNull(constants$4.lua_iscfunction$MH,"lua_iscfunction");
    }
    public static int lua_iscfunction ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.lua_iscfunction$MH, "lua_iscfunction");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_isinteger$MH() {
        return RuntimeHelper.requireNonNull(constants$4.lua_isinteger$MH,"lua_isinteger");
    }
    public static int lua_isinteger ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.lua_isinteger$MH, "lua_isinteger");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_isuserdata$MH() {
        return RuntimeHelper.requireNonNull(constants$4.lua_isuserdata$MH,"lua_isuserdata");
    }
    public static int lua_isuserdata ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.lua_isuserdata$MH, "lua_isuserdata");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_type$MH() {
        return RuntimeHelper.requireNonNull(constants$4.lua_type$MH,"lua_type");
    }
    public static int lua_type ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.lua_type$MH, "lua_type");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_typename$MH() {
        return RuntimeHelper.requireNonNull(constants$4.lua_typename$MH,"lua_typename");
    }
    public static MemoryAddress lua_typename ( Addressable L,  int tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.lua_typename$MH, "lua_typename");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_tonumberx$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lua_tonumberx$MH,"lua_tonumberx");
    }
    public static double lua_tonumberx ( Addressable L,  int idx,  Addressable isnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.lua_tonumberx$MH, "lua_tonumberx");
        try {
            return (double)mh$.invokeExact(L.address(), idx, isnum.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_tointegerx$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lua_tointegerx$MH,"lua_tointegerx");
    }
    public static long lua_tointegerx ( Addressable L,  int idx,  Addressable isnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.lua_tointegerx$MH, "lua_tointegerx");
        try {
            return (long)mh$.invokeExact(L.address(), idx, isnum.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_toboolean$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lua_toboolean$MH,"lua_toboolean");
    }
    public static int lua_toboolean ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.lua_toboolean$MH, "lua_toboolean");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_tolstring$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lua_tolstring$MH,"lua_tolstring");
    }
    public static MemoryAddress lua_tolstring ( Addressable L,  int idx,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.lua_tolstring$MH, "lua_tolstring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), idx, len.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_rawlen$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lua_rawlen$MH,"lua_rawlen");
    }
    public static long lua_rawlen ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.lua_rawlen$MH, "lua_rawlen");
        try {
            return (long)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_tocfunction$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lua_tocfunction$MH,"lua_tocfunction");
    }
    public static MemoryAddress lua_tocfunction ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.lua_tocfunction$MH, "lua_tocfunction");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_touserdata$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lua_touserdata$MH,"lua_touserdata");
    }
    public static MemoryAddress lua_touserdata ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.lua_touserdata$MH, "lua_touserdata");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_tothread$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lua_tothread$MH,"lua_tothread");
    }
    public static MemoryAddress lua_tothread ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.lua_tothread$MH, "lua_tothread");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_topointer$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lua_topointer$MH,"lua_topointer");
    }
    public static MemoryAddress lua_topointer ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.lua_topointer$MH, "lua_topointer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_arith$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lua_arith$MH,"lua_arith");
    }
    public static void lua_arith ( Addressable L,  int op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.lua_arith$MH, "lua_arith");
        try {
            mh$.invokeExact(L.address(), op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_rawequal$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lua_rawequal$MH,"lua_rawequal");
    }
    public static int lua_rawequal ( Addressable L,  int idx1,  int idx2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.lua_rawequal$MH, "lua_rawequal");
        try {
            return (int)mh$.invokeExact(L.address(), idx1, idx2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lua_compare$MH,"lua_compare");
    }
    public static int lua_compare ( Addressable L,  int idx1,  int idx2,  int op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.lua_compare$MH, "lua_compare");
        try {
            return (int)mh$.invokeExact(L.address(), idx1, idx2, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushnil$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lua_pushnil$MH,"lua_pushnil");
    }
    public static void lua_pushnil ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.lua_pushnil$MH, "lua_pushnil");
        try {
            mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushnumber$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lua_pushnumber$MH,"lua_pushnumber");
    }
    public static void lua_pushnumber ( Addressable L,  double n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.lua_pushnumber$MH, "lua_pushnumber");
        try {
            mh$.invokeExact(L.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushinteger$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lua_pushinteger$MH,"lua_pushinteger");
    }
    public static void lua_pushinteger ( Addressable L,  long n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.lua_pushinteger$MH, "lua_pushinteger");
        try {
            mh$.invokeExact(L.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushlstring$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lua_pushlstring$MH,"lua_pushlstring");
    }
    public static MemoryAddress lua_pushlstring ( Addressable L,  Addressable s,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.lua_pushlstring$MH, "lua_pushlstring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), s.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushstring$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lua_pushstring$MH,"lua_pushstring");
    }
    public static MemoryAddress lua_pushstring ( Addressable L,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.lua_pushstring$MH, "lua_pushstring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushvfstring$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lua_pushvfstring$MH,"lua_pushvfstring");
    }
    public static MemoryAddress lua_pushvfstring ( Addressable L,  Addressable fmt,  Addressable argp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.lua_pushvfstring$MH, "lua_pushvfstring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), fmt.address(), argp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushfstring$MH() {
        return RuntimeHelper.requireNonNull(constants$8.lua_pushfstring$MH,"lua_pushfstring");
    }
    public static MemoryAddress lua_pushfstring ( Addressable L,  Addressable fmt, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.lua_pushfstring$MH, "lua_pushfstring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), fmt.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushcclosure$MH() {
        return RuntimeHelper.requireNonNull(constants$8.lua_pushcclosure$MH,"lua_pushcclosure");
    }
    public static void lua_pushcclosure ( Addressable L,  Addressable fn,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.lua_pushcclosure$MH, "lua_pushcclosure");
        try {
            mh$.invokeExact(L.address(), fn.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushboolean$MH() {
        return RuntimeHelper.requireNonNull(constants$8.lua_pushboolean$MH,"lua_pushboolean");
    }
    public static void lua_pushboolean ( Addressable L,  int b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.lua_pushboolean$MH, "lua_pushboolean");
        try {
            mh$.invokeExact(L.address(), b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushlightuserdata$MH() {
        return RuntimeHelper.requireNonNull(constants$8.lua_pushlightuserdata$MH,"lua_pushlightuserdata");
    }
    public static void lua_pushlightuserdata ( Addressable L,  Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.lua_pushlightuserdata$MH, "lua_pushlightuserdata");
        try {
            mh$.invokeExact(L.address(), p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_pushthread$MH() {
        return RuntimeHelper.requireNonNull(constants$8.lua_pushthread$MH,"lua_pushthread");
    }
    public static int lua_pushthread ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.lua_pushthread$MH, "lua_pushthread");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_getglobal$MH() {
        return RuntimeHelper.requireNonNull(constants$8.lua_getglobal$MH,"lua_getglobal");
    }
    public static int lua_getglobal ( Addressable L,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.lua_getglobal$MH, "lua_getglobal");
        try {
            return (int)mh$.invokeExact(L.address(), name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_gettable$MH() {
        return RuntimeHelper.requireNonNull(constants$9.lua_gettable$MH,"lua_gettable");
    }
    public static int lua_gettable ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.lua_gettable$MH, "lua_gettable");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_getfield$MH() {
        return RuntimeHelper.requireNonNull(constants$9.lua_getfield$MH,"lua_getfield");
    }
    public static int lua_getfield ( Addressable L,  int idx,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.lua_getfield$MH, "lua_getfield");
        try {
            return (int)mh$.invokeExact(L.address(), idx, k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_geti$MH() {
        return RuntimeHelper.requireNonNull(constants$9.lua_geti$MH,"lua_geti");
    }
    public static int lua_geti ( Addressable L,  int idx,  long n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.lua_geti$MH, "lua_geti");
        try {
            return (int)mh$.invokeExact(L.address(), idx, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_rawget$MH() {
        return RuntimeHelper.requireNonNull(constants$9.lua_rawget$MH,"lua_rawget");
    }
    public static int lua_rawget ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.lua_rawget$MH, "lua_rawget");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_rawgeti$MH() {
        return RuntimeHelper.requireNonNull(constants$9.lua_rawgeti$MH,"lua_rawgeti");
    }
    public static int lua_rawgeti ( Addressable L,  int idx,  long n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.lua_rawgeti$MH, "lua_rawgeti");
        try {
            return (int)mh$.invokeExact(L.address(), idx, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_rawgetp$MH() {
        return RuntimeHelper.requireNonNull(constants$9.lua_rawgetp$MH,"lua_rawgetp");
    }
    public static int lua_rawgetp ( Addressable L,  int idx,  Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.lua_rawgetp$MH, "lua_rawgetp");
        try {
            return (int)mh$.invokeExact(L.address(), idx, p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_createtable$MH() {
        return RuntimeHelper.requireNonNull(constants$10.lua_createtable$MH,"lua_createtable");
    }
    public static void lua_createtable ( Addressable L,  int narr,  int nrec) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.lua_createtable$MH, "lua_createtable");
        try {
            mh$.invokeExact(L.address(), narr, nrec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_newuserdata$MH() {
        return RuntimeHelper.requireNonNull(constants$10.lua_newuserdata$MH,"lua_newuserdata");
    }
    public static MemoryAddress lua_newuserdata ( Addressable L,  long sz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.lua_newuserdata$MH, "lua_newuserdata");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), sz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_getmetatable$MH() {
        return RuntimeHelper.requireNonNull(constants$10.lua_getmetatable$MH,"lua_getmetatable");
    }
    public static int lua_getmetatable ( Addressable L,  int objindex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.lua_getmetatable$MH, "lua_getmetatable");
        try {
            return (int)mh$.invokeExact(L.address(), objindex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_getuservalue$MH() {
        return RuntimeHelper.requireNonNull(constants$10.lua_getuservalue$MH,"lua_getuservalue");
    }
    public static int lua_getuservalue ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.lua_getuservalue$MH, "lua_getuservalue");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_setglobal$MH() {
        return RuntimeHelper.requireNonNull(constants$10.lua_setglobal$MH,"lua_setglobal");
    }
    public static void lua_setglobal ( Addressable L,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.lua_setglobal$MH, "lua_setglobal");
        try {
            mh$.invokeExact(L.address(), name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_settable$MH() {
        return RuntimeHelper.requireNonNull(constants$10.lua_settable$MH,"lua_settable");
    }
    public static void lua_settable ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.lua_settable$MH, "lua_settable");
        try {
            mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_setfield$MH() {
        return RuntimeHelper.requireNonNull(constants$11.lua_setfield$MH,"lua_setfield");
    }
    public static void lua_setfield ( Addressable L,  int idx,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.lua_setfield$MH, "lua_setfield");
        try {
            mh$.invokeExact(L.address(), idx, k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_seti$MH() {
        return RuntimeHelper.requireNonNull(constants$11.lua_seti$MH,"lua_seti");
    }
    public static void lua_seti ( Addressable L,  int idx,  long n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.lua_seti$MH, "lua_seti");
        try {
            mh$.invokeExact(L.address(), idx, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_rawset$MH() {
        return RuntimeHelper.requireNonNull(constants$11.lua_rawset$MH,"lua_rawset");
    }
    public static void lua_rawset ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.lua_rawset$MH, "lua_rawset");
        try {
            mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_rawseti$MH() {
        return RuntimeHelper.requireNonNull(constants$11.lua_rawseti$MH,"lua_rawseti");
    }
    public static void lua_rawseti ( Addressable L,  int idx,  long n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.lua_rawseti$MH, "lua_rawseti");
        try {
            mh$.invokeExact(L.address(), idx, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_rawsetp$MH() {
        return RuntimeHelper.requireNonNull(constants$11.lua_rawsetp$MH,"lua_rawsetp");
    }
    public static void lua_rawsetp ( Addressable L,  int idx,  Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.lua_rawsetp$MH, "lua_rawsetp");
        try {
            mh$.invokeExact(L.address(), idx, p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_setmetatable$MH() {
        return RuntimeHelper.requireNonNull(constants$11.lua_setmetatable$MH,"lua_setmetatable");
    }
    public static int lua_setmetatable ( Addressable L,  int objindex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.lua_setmetatable$MH, "lua_setmetatable");
        try {
            return (int)mh$.invokeExact(L.address(), objindex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_setuservalue$MH() {
        return RuntimeHelper.requireNonNull(constants$12.lua_setuservalue$MH,"lua_setuservalue");
    }
    public static void lua_setuservalue ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.lua_setuservalue$MH, "lua_setuservalue");
        try {
            mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_callk$MH() {
        return RuntimeHelper.requireNonNull(constants$12.lua_callk$MH,"lua_callk");
    }
    public static void lua_callk ( Addressable L,  int nargs,  int nresults,  long ctx,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.lua_callk$MH, "lua_callk");
        try {
            mh$.invokeExact(L.address(), nargs, nresults, ctx, k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    // manually inserted macro translations
    public static void lua_call(Addressable L, int n, int r) {
        lua_callk(L, n, r, 0, NULL);
    }
    // end of manually inserted macro translations
    public static MethodHandle lua_pcallk$MH() {
        return RuntimeHelper.requireNonNull(constants$12.lua_pcallk$MH,"lua_pcallk");
    }
    public static int lua_pcallk ( Addressable L,  int nargs,  int nresults,  int errfunc,  long ctx,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.lua_pcallk$MH, "lua_pcallk");
        try {
            return (int)mh$.invokeExact(L.address(), nargs, nresults, errfunc, ctx, k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    // manually inserted macro translations
    public static int lua_pcall(Addressable L, int n, int r, int f) {
        return lua_pcallk(L, n, r, f, 0, NULL);
    }
    // end of manually inserted macro translations
    public static MethodHandle lua_load$MH() {
        return RuntimeHelper.requireNonNull(constants$12.lua_load$MH,"lua_load");
    }
    public static int lua_load ( Addressable L,  Addressable reader,  Addressable dt,  Addressable chunkname,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.lua_load$MH, "lua_load");
        try {
            return (int)mh$.invokeExact(L.address(), reader.address(), dt.address(), chunkname.address(), mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_dump$MH() {
        return RuntimeHelper.requireNonNull(constants$12.lua_dump$MH,"lua_dump");
    }
    public static int lua_dump ( Addressable L,  Addressable writer,  Addressable data,  int strip) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.lua_dump$MH, "lua_dump");
        try {
            return (int)mh$.invokeExact(L.address(), writer.address(), data.address(), strip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_yieldk$MH() {
        return RuntimeHelper.requireNonNull(constants$12.lua_yieldk$MH,"lua_yieldk");
    }
    public static int lua_yieldk ( Addressable L,  int nresults,  long ctx,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.lua_yieldk$MH, "lua_yieldk");
        try {
            return (int)mh$.invokeExact(L.address(), nresults, ctx, k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_resume$MH() {
        return RuntimeHelper.requireNonNull(constants$13.lua_resume$MH,"lua_resume");
    }
    public static int lua_resume ( Addressable L,  Addressable from,  int narg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.lua_resume$MH, "lua_resume");
        try {
            return (int)mh$.invokeExact(L.address(), from.address(), narg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_status$MH() {
        return RuntimeHelper.requireNonNull(constants$13.lua_status$MH,"lua_status");
    }
    public static int lua_status ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.lua_status$MH, "lua_status");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_isyieldable$MH() {
        return RuntimeHelper.requireNonNull(constants$13.lua_isyieldable$MH,"lua_isyieldable");
    }
    public static int lua_isyieldable ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.lua_isyieldable$MH, "lua_isyieldable");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    // manually inserted macro translations
    public static void lua_yield(Addressable L, int n) {
        lua_yieldk(L, n, 0, NULL);
    }
    // end of manually inserted macro translations
    public static MethodHandle lua_gc$MH() {
        return RuntimeHelper.requireNonNull(constants$13.lua_gc$MH,"lua_gc");
    }
    public static int lua_gc ( Addressable L,  int what,  int data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.lua_gc$MH, "lua_gc");
        try {
            return (int)mh$.invokeExact(L.address(), what, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_error$MH() {
        return RuntimeHelper.requireNonNull(constants$13.lua_error$MH,"lua_error");
    }
    public static int lua_error ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.lua_error$MH, "lua_error");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_next$MH() {
        return RuntimeHelper.requireNonNull(constants$13.lua_next$MH,"lua_next");
    }
    public static int lua_next ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.lua_next$MH, "lua_next");
        try {
            return (int)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_concat$MH() {
        return RuntimeHelper.requireNonNull(constants$14.lua_concat$MH,"lua_concat");
    }
    public static void lua_concat ( Addressable L,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.lua_concat$MH, "lua_concat");
        try {
            mh$.invokeExact(L.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_len$MH() {
        return RuntimeHelper.requireNonNull(constants$14.lua_len$MH,"lua_len");
    }
    public static void lua_len ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.lua_len$MH, "lua_len");
        try {
            mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_stringtonumber$MH() {
        return RuntimeHelper.requireNonNull(constants$14.lua_stringtonumber$MH,"lua_stringtonumber");
    }
    public static long lua_stringtonumber ( Addressable L,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.lua_stringtonumber$MH, "lua_stringtonumber");
        try {
            return (long)mh$.invokeExact(L.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_getallocf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.lua_getallocf$MH,"lua_getallocf");
    }
    public static MemoryAddress lua_getallocf ( Addressable L,  Addressable ud) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.lua_getallocf$MH, "lua_getallocf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), ud.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_setallocf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.lua_setallocf$MH,"lua_setallocf");
    }
    public static void lua_setallocf ( Addressable L,  Addressable f,  Addressable ud) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.lua_setallocf$MH, "lua_setallocf");
        try {
            mh$.invokeExact(L.address(), f.address(), ud.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    // manually inserted macro translations
    // some useful macros
    public static Addressable lua_getextraspace(Addressable L) {
        return L.address().addOffset(-LUA_EXTRASPACE());
    }
    public static double lua_tonumber(Addressable L, int i) {
        return lua_tonumberx(L, i, NULL);
    }
    public static long lua_tointeger(Addressable L, int i) {
        return lua_tointegerx(L, i, NULL);
    }
    public static void lua_pop(Addressable L, int n) {
        lua_settop(L, -n-1);
    }
    public static void lua_newtable(Addressable L) {
        lua_createtable(L, 0, 0);
    }
    public static void lua_register(Addressable L, Addressable n, Addressable f) {
        lua_pushcfunction(L, f);
        lua_setglobal(L, f);
    }
    public static void lua_pushcfunction(Addressable L, Addressable f) {
        lua_pushcclosure(L, f, 0);
    }
    public static boolean lua_isfunction(Addressable L, int n) {
        return lua_type(L, n) == LUA_TFUNCTION();
    }
    public static boolean lua_istable(Addressable L, int n) {
        return lua_type(L, n) == LUA_TTABLE();
    }
    public static boolean lua_islightuserdata(Addressable L, int n) {
        return lua_type(L, n) == LUA_TLIGHTUSERDATA();
    }
    public static boolean lua_isnil(Addressable L, int n) {
        return lua_type(L, n) == LUA_TNIL();
    }
    public static boolean lua_isboolean(Addressable L, int n) {
        return lua_type(L, n) == LUA_TBOOLEAN();
    }
    public static boolean lua_isthread(Addressable L, int n) {
        return lua_type(L, n) == LUA_TTHREAD();
    }
    public static boolean lua_isnone(Addressable L, int n) {
        return lua_type(L, n) == LUA_TNONE();
    }
    public static boolean lua_isnoneornil(Addressable L, int n) {
        return lua_type(L, n) <= 0;
    }
    public static void lua_pushliteral(Addressable L, String s) {
        try (ResourceScope scope = ResourceScope.newConfinedScope()) {
            lua_pushstring(L, CLinker.toCString(s, scope));
        }
    }
    public static void lua_pushglobaltable(Addressable L) {
        lua_rawgeti(L, LUA_REGISTRYINDEX(), LUA_RIDX_GLOBALS());
    }
    public static MemoryAddress lua_tostring(Addressable L, int i) {
        return lua_tolstring(L, i, NULL);
    }
    public static void lua_insert(Addressable L, int idx) {
        lua_rotate(L, idx, 1);
    }
    public static void lua_remove(Addressable L, int idx) {
        lua_rotate(L, idx, -1);
        lua_pop(L, 1);
    }
    public static void lua_replace(Addressable L, int idx) {
        lua_copy(L, -1, idx);
        lua_pop(L, 1);
    }
    // end of manually inserted macro translations
    public static MethodHandle lua_getstack$MH() {
        return RuntimeHelper.requireNonNull(constants$15.lua_getstack$MH,"lua_getstack");
    }
    public static int lua_getstack ( Addressable L,  int level,  Addressable ar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.lua_getstack$MH, "lua_getstack");
        try {
            return (int)mh$.invokeExact(L.address(), level, ar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_getinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$15.lua_getinfo$MH,"lua_getinfo");
    }
    public static int lua_getinfo ( Addressable L,  Addressable what,  Addressable ar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.lua_getinfo$MH, "lua_getinfo");
        try {
            return (int)mh$.invokeExact(L.address(), what.address(), ar.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_getlocal$MH() {
        return RuntimeHelper.requireNonNull(constants$15.lua_getlocal$MH,"lua_getlocal");
    }
    public static MemoryAddress lua_getlocal ( Addressable L,  Addressable ar,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.lua_getlocal$MH, "lua_getlocal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), ar.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_setlocal$MH() {
        return RuntimeHelper.requireNonNull(constants$15.lua_setlocal$MH,"lua_setlocal");
    }
    public static MemoryAddress lua_setlocal ( Addressable L,  Addressable ar,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.lua_setlocal$MH, "lua_setlocal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), ar.address(), n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_getupvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$15.lua_getupvalue$MH,"lua_getupvalue");
    }
    public static MemoryAddress lua_getupvalue ( Addressable L,  int funcindex,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.lua_getupvalue$MH, "lua_getupvalue");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), funcindex, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_setupvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$16.lua_setupvalue$MH,"lua_setupvalue");
    }
    public static MemoryAddress lua_setupvalue ( Addressable L,  int funcindex,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.lua_setupvalue$MH, "lua_setupvalue");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), funcindex, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_upvalueid$MH() {
        return RuntimeHelper.requireNonNull(constants$16.lua_upvalueid$MH,"lua_upvalueid");
    }
    public static MemoryAddress lua_upvalueid ( Addressable L,  int fidx,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.lua_upvalueid$MH, "lua_upvalueid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), fidx, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_upvaluejoin$MH() {
        return RuntimeHelper.requireNonNull(constants$16.lua_upvaluejoin$MH,"lua_upvaluejoin");
    }
    public static void lua_upvaluejoin ( Addressable L,  int fidx1,  int n1,  int fidx2,  int n2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.lua_upvaluejoin$MH, "lua_upvaluejoin");
        try {
            mh$.invokeExact(L.address(), fidx1, n1, fidx2, n2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_sethook$MH() {
        return RuntimeHelper.requireNonNull(constants$16.lua_sethook$MH,"lua_sethook");
    }
    public static void lua_sethook ( Addressable L,  Addressable func,  int mask,  int count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.lua_sethook$MH, "lua_sethook");
        try {
            mh$.invokeExact(L.address(), func.address(), mask, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_gethook$MH() {
        return RuntimeHelper.requireNonNull(constants$16.lua_gethook$MH,"lua_gethook");
    }
    public static MemoryAddress lua_gethook ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.lua_gethook$MH, "lua_gethook");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_gethookmask$MH() {
        return RuntimeHelper.requireNonNull(constants$16.lua_gethookmask$MH,"lua_gethookmask");
    }
    public static int lua_gethookmask ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.lua_gethookmask$MH, "lua_gethookmask");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lua_gethookcount$MH() {
        return RuntimeHelper.requireNonNull(constants$17.lua_gethookcount$MH,"lua_gethookcount");
    }
    public static int lua_gethookcount ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.lua_gethookcount$MH, "lua_gethookcount");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_base$MH() {
        return RuntimeHelper.requireNonNull(constants$17.luaopen_base$MH,"luaopen_base");
    }
    public static int luaopen_base ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.luaopen_base$MH, "luaopen_base");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_coroutine$MH() {
        return RuntimeHelper.requireNonNull(constants$17.luaopen_coroutine$MH,"luaopen_coroutine");
    }
    public static int luaopen_coroutine ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.luaopen_coroutine$MH, "luaopen_coroutine");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_table$MH() {
        return RuntimeHelper.requireNonNull(constants$17.luaopen_table$MH,"luaopen_table");
    }
    public static int luaopen_table ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.luaopen_table$MH, "luaopen_table");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_io$MH() {
        return RuntimeHelper.requireNonNull(constants$17.luaopen_io$MH,"luaopen_io");
    }
    public static int luaopen_io ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.luaopen_io$MH, "luaopen_io");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_os$MH() {
        return RuntimeHelper.requireNonNull(constants$17.luaopen_os$MH,"luaopen_os");
    }
    public static int luaopen_os ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.luaopen_os$MH, "luaopen_os");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_string$MH() {
        return RuntimeHelper.requireNonNull(constants$18.luaopen_string$MH,"luaopen_string");
    }
    public static int luaopen_string ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.luaopen_string$MH, "luaopen_string");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$18.luaopen_utf8$MH,"luaopen_utf8");
    }
    public static int luaopen_utf8 ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.luaopen_utf8$MH, "luaopen_utf8");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_bit32$MH() {
        return RuntimeHelper.requireNonNull(constants$18.luaopen_bit32$MH,"luaopen_bit32");
    }
    public static int luaopen_bit32 ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.luaopen_bit32$MH, "luaopen_bit32");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_math$MH() {
        return RuntimeHelper.requireNonNull(constants$18.luaopen_math$MH,"luaopen_math");
    }
    public static int luaopen_math ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.luaopen_math$MH, "luaopen_math");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_debug$MH() {
        return RuntimeHelper.requireNonNull(constants$18.luaopen_debug$MH,"luaopen_debug");
    }
    public static int luaopen_debug ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.luaopen_debug$MH, "luaopen_debug");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_package$MH() {
        return RuntimeHelper.requireNonNull(constants$18.luaopen_package$MH,"luaopen_package");
    }
    public static int luaopen_package ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.luaopen_package$MH, "luaopen_package");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaopen_eris$MH() {
        return RuntimeHelper.requireNonNull(constants$19.luaopen_eris$MH,"luaopen_eris");
    }
    public static int luaopen_eris ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.luaopen_eris$MH, "luaopen_eris");
        try {
            return (int)mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_openlibs$MH() {
        return RuntimeHelper.requireNonNull(constants$19.luaL_openlibs$MH,"luaL_openlibs");
    }
    public static void luaL_openlibs ( Addressable L) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.luaL_openlibs$MH, "luaL_openlibs");
        try {
            mh$.invokeExact(L.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_checkversion_$MH() {
        return RuntimeHelper.requireNonNull(constants$19.luaL_checkversion_$MH,"luaL_checkversion_");
    }
    public static void luaL_checkversion_ ( Addressable L,  double ver,  long sz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.luaL_checkversion_$MH, "luaL_checkversion_");
        try {
            mh$.invokeExact(L.address(), ver, sz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    // manually inserted macro translations
    public static void luaL_checkversion(Addressable L) {
        luaL_checkversion_(L, LUA_VERSION_NUM(), LUAL_NUMSIZES());
    }
    // end of manually inserted macro translations
    public static MethodHandle luaL_getmetafield$MH() {
        return RuntimeHelper.requireNonNull(constants$19.luaL_getmetafield$MH,"luaL_getmetafield");
    }
    public static int luaL_getmetafield ( Addressable L,  int obj,  Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.luaL_getmetafield$MH, "luaL_getmetafield");
        try {
            return (int)mh$.invokeExact(L.address(), obj, e.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_callmeta$MH() {
        return RuntimeHelper.requireNonNull(constants$19.luaL_callmeta$MH,"luaL_callmeta");
    }
    public static int luaL_callmeta ( Addressable L,  int obj,  Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.luaL_callmeta$MH, "luaL_callmeta");
        try {
            return (int)mh$.invokeExact(L.address(), obj, e.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_tolstring$MH() {
        return RuntimeHelper.requireNonNull(constants$19.luaL_tolstring$MH,"luaL_tolstring");
    }
    public static MemoryAddress luaL_tolstring ( Addressable L,  int idx,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.luaL_tolstring$MH, "luaL_tolstring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), idx, len.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_argerror$MH() {
        return RuntimeHelper.requireNonNull(constants$20.luaL_argerror$MH,"luaL_argerror");
    }
    public static int luaL_argerror ( Addressable L,  int arg,  Addressable extramsg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.luaL_argerror$MH, "luaL_argerror");
        try {
            return (int)mh$.invokeExact(L.address(), arg, extramsg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_checklstring$MH() {
        return RuntimeHelper.requireNonNull(constants$20.luaL_checklstring$MH,"luaL_checklstring");
    }
    public static MemoryAddress luaL_checklstring ( Addressable L,  int arg,  Addressable l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.luaL_checklstring$MH, "luaL_checklstring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), arg, l.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_optlstring$MH() {
        return RuntimeHelper.requireNonNull(constants$20.luaL_optlstring$MH,"luaL_optlstring");
    }
    public static MemoryAddress luaL_optlstring ( Addressable L,  int arg,  Addressable def,  Addressable l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.luaL_optlstring$MH, "luaL_optlstring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), arg, def.address(), l.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_checknumber$MH() {
        return RuntimeHelper.requireNonNull(constants$20.luaL_checknumber$MH,"luaL_checknumber");
    }
    public static double luaL_checknumber ( Addressable L,  int arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.luaL_checknumber$MH, "luaL_checknumber");
        try {
            return (double)mh$.invokeExact(L.address(), arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_optnumber$MH() {
        return RuntimeHelper.requireNonNull(constants$20.luaL_optnumber$MH,"luaL_optnumber");
    }
    public static double luaL_optnumber ( Addressable L,  int arg,  double def) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.luaL_optnumber$MH, "luaL_optnumber");
        try {
            return (double)mh$.invokeExact(L.address(), arg, def);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_checkinteger$MH() {
        return RuntimeHelper.requireNonNull(constants$20.luaL_checkinteger$MH,"luaL_checkinteger");
    }
    public static long luaL_checkinteger ( Addressable L,  int arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.luaL_checkinteger$MH, "luaL_checkinteger");
        try {
            return (long)mh$.invokeExact(L.address(), arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_optinteger$MH() {
        return RuntimeHelper.requireNonNull(constants$21.luaL_optinteger$MH,"luaL_optinteger");
    }
    public static long luaL_optinteger ( Addressable L,  int arg,  long def) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.luaL_optinteger$MH, "luaL_optinteger");
        try {
            return (long)mh$.invokeExact(L.address(), arg, def);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_checkstack$MH() {
        return RuntimeHelper.requireNonNull(constants$21.luaL_checkstack$MH,"luaL_checkstack");
    }
    public static void luaL_checkstack ( Addressable L,  int sz,  Addressable msg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.luaL_checkstack$MH, "luaL_checkstack");
        try {
            mh$.invokeExact(L.address(), sz, msg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_checktype$MH() {
        return RuntimeHelper.requireNonNull(constants$21.luaL_checktype$MH,"luaL_checktype");
    }
    public static void luaL_checktype ( Addressable L,  int arg,  int t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.luaL_checktype$MH, "luaL_checktype");
        try {
            mh$.invokeExact(L.address(), arg, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_checkany$MH() {
        return RuntimeHelper.requireNonNull(constants$21.luaL_checkany$MH,"luaL_checkany");
    }
    public static void luaL_checkany ( Addressable L,  int arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.luaL_checkany$MH, "luaL_checkany");
        try {
            mh$.invokeExact(L.address(), arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_newmetatable$MH() {
        return RuntimeHelper.requireNonNull(constants$21.luaL_newmetatable$MH,"luaL_newmetatable");
    }
    public static int luaL_newmetatable ( Addressable L,  Addressable tname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.luaL_newmetatable$MH, "luaL_newmetatable");
        try {
            return (int)mh$.invokeExact(L.address(), tname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_setmetatable$MH() {
        return RuntimeHelper.requireNonNull(constants$21.luaL_setmetatable$MH,"luaL_setmetatable");
    }
    public static void luaL_setmetatable ( Addressable L,  Addressable tname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.luaL_setmetatable$MH, "luaL_setmetatable");
        try {
            mh$.invokeExact(L.address(), tname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_testudata$MH() {
        return RuntimeHelper.requireNonNull(constants$22.luaL_testudata$MH,"luaL_testudata");
    }
    public static MemoryAddress luaL_testudata ( Addressable L,  int ud,  Addressable tname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.luaL_testudata$MH, "luaL_testudata");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), ud, tname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_checkudata$MH() {
        return RuntimeHelper.requireNonNull(constants$22.luaL_checkudata$MH,"luaL_checkudata");
    }
    public static MemoryAddress luaL_checkudata ( Addressable L,  int ud,  Addressable tname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.luaL_checkudata$MH, "luaL_checkudata");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), ud, tname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_where$MH() {
        return RuntimeHelper.requireNonNull(constants$22.luaL_where$MH,"luaL_where");
    }
    public static void luaL_where ( Addressable L,  int lvl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.luaL_where$MH, "luaL_where");
        try {
            mh$.invokeExact(L.address(), lvl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_error$MH() {
        return RuntimeHelper.requireNonNull(constants$22.luaL_error$MH,"luaL_error");
    }
    public static int luaL_error ( Addressable L,  Addressable fmt, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.luaL_error$MH, "luaL_error");
        try {
            return (int)mh$.invokeExact(L.address(), fmt.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_checkoption$MH() {
        return RuntimeHelper.requireNonNull(constants$22.luaL_checkoption$MH,"luaL_checkoption");
    }
    public static int luaL_checkoption ( Addressable L,  int arg,  Addressable def,  Addressable lst) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.luaL_checkoption$MH, "luaL_checkoption");
        try {
            return (int)mh$.invokeExact(L.address(), arg, def.address(), lst.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_fileresult$MH() {
        return RuntimeHelper.requireNonNull(constants$22.luaL_fileresult$MH,"luaL_fileresult");
    }
    public static int luaL_fileresult ( Addressable L,  int stat,  Addressable fname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.luaL_fileresult$MH, "luaL_fileresult");
        try {
            return (int)mh$.invokeExact(L.address(), stat, fname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_execresult$MH() {
        return RuntimeHelper.requireNonNull(constants$23.luaL_execresult$MH,"luaL_execresult");
    }
    public static int luaL_execresult ( Addressable L,  int stat) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.luaL_execresult$MH, "luaL_execresult");
        try {
            return (int)mh$.invokeExact(L.address(), stat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$23.luaL_ref$MH,"luaL_ref");
    }
    public static int luaL_ref ( Addressable L,  int t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.luaL_ref$MH, "luaL_ref");
        try {
            return (int)mh$.invokeExact(L.address(), t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$23.luaL_unref$MH,"luaL_unref");
    }
    public static void luaL_unref ( Addressable L,  int t,  int ref) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.luaL_unref$MH, "luaL_unref");
        try {
            mh$.invokeExact(L.address(), t, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_loadfilex$MH() {
        return RuntimeHelper.requireNonNull(constants$23.luaL_loadfilex$MH,"luaL_loadfilex");
    }
    public static int luaL_loadfilex ( Addressable L,  Addressable filename,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.luaL_loadfilex$MH, "luaL_loadfilex");
        try {
            return (int)mh$.invokeExact(L.address(), filename.address(), mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    // manually inserted macro translations
    public static int luaL_loadfile(Addressable L, Addressable f) {
        return luaL_loadfilex(L, f, NULL);
    }
    // end of manually inserted macro translations
    public static MethodHandle luaL_loadbufferx$MH() {
        return RuntimeHelper.requireNonNull(constants$23.luaL_loadbufferx$MH,"luaL_loadbufferx");
    }
    public static int luaL_loadbufferx ( Addressable L,  Addressable buff,  long sz,  Addressable name,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.luaL_loadbufferx$MH, "luaL_loadbufferx");
        try {
            return (int)mh$.invokeExact(L.address(), buff.address(), sz, name.address(), mode.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_loadstring$MH() {
        return RuntimeHelper.requireNonNull(constants$23.luaL_loadstring$MH,"luaL_loadstring");
    }
    public static int luaL_loadstring ( Addressable L,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.luaL_loadstring$MH, "luaL_loadstring");
        try {
            return (int)mh$.invokeExact(L.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_newstate$MH() {
        return RuntimeHelper.requireNonNull(constants$24.luaL_newstate$MH,"luaL_newstate");
    }
    public static MemoryAddress luaL_newstate () {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.luaL_newstate$MH, "luaL_newstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_len$MH() {
        return RuntimeHelper.requireNonNull(constants$24.luaL_len$MH,"luaL_len");
    }
    public static long luaL_len ( Addressable L,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.luaL_len$MH, "luaL_len");
        try {
            return (long)mh$.invokeExact(L.address(), idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_gsub$MH() {
        return RuntimeHelper.requireNonNull(constants$24.luaL_gsub$MH,"luaL_gsub");
    }
    public static MemoryAddress luaL_gsub ( Addressable L,  Addressable s,  Addressable p,  Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.luaL_gsub$MH, "luaL_gsub");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), s.address(), p.address(), r.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_setfuncs$MH() {
        return RuntimeHelper.requireNonNull(constants$24.luaL_setfuncs$MH,"luaL_setfuncs");
    }
    public static void luaL_setfuncs ( Addressable L,  Addressable l,  int nup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.luaL_setfuncs$MH, "luaL_setfuncs");
        try {
            mh$.invokeExact(L.address(), l.address(), nup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_getsubtable$MH() {
        return RuntimeHelper.requireNonNull(constants$24.luaL_getsubtable$MH,"luaL_getsubtable");
    }
    public static int luaL_getsubtable ( Addressable L,  int idx,  Addressable fname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.luaL_getsubtable$MH, "luaL_getsubtable");
        try {
            return (int)mh$.invokeExact(L.address(), idx, fname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_traceback$MH() {
        return RuntimeHelper.requireNonNull(constants$24.luaL_traceback$MH,"luaL_traceback");
    }
    public static void luaL_traceback ( Addressable L,  Addressable L1,  Addressable msg,  int level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.luaL_traceback$MH, "luaL_traceback");
        try {
            mh$.invokeExact(L.address(), L1.address(), msg.address(), level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_requiref$MH() {
        return RuntimeHelper.requireNonNull(constants$25.luaL_requiref$MH,"luaL_requiref");
    }
    public static void luaL_requiref ( Addressable L,  Addressable modname,  Addressable openf,  int glb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.luaL_requiref$MH, "luaL_requiref");
        try {
            mh$.invokeExact(L.address(), modname.address(), openf.address(), glb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    // manually inserted macro translations
    // some useful macros
    // TODO: luaL_newlibtable
    // TODO: luaL_newlib
    public static void luaL_argcheck(Addressable L, boolean cond, int arg, Addressable extramsg) {
        if (!cond)
            luaL_argerror(L, arg, extramsg);
    }
    public static MemoryAddress luaL_checkstring(Addressable L, int n) {
        return luaL_checklstring(L, n, NULL);
    }
    public static MemoryAddress luaL_optstring(Addressable L, int n, Addressable d) {
        return luaL_optlstring(L, n, d, NULL);
    }
    public static MemoryAddress luaL_typename(Addressable L, int i) {
        return lua_typename(L, lua_type(L, i));
    }
    public static int luaL_dofile(Addressable L, Addressable fn) {
        int err = luaL_loadfile(L, fn);
        if (err == 0)
            err = lua_pcall(L, 0, LUA_MULTRET(), 0);
        return err;
    }
    public static int luaL_dostring(Addressable L, Addressable s) {
        int err = luaL_loadstring(L, s);
        if (err == 0)
            err = lua_pcall(L, 0, LUA_MULTRET(), 0);
        return err;
    }
    public static int luaL_getmetatable(Addressable L, Addressable n) {
        return lua_getfield(L, LUA_REGISTRYINDEX(), n);
    }
    // TODO: lua_opt (function argument)
    public static int luaL_loadbuffer(Addressable L, Addressable s, long sz, Addressable n) {
        return luaL_loadbufferx(L,s,sz,n,NULL);
    }
    // Generic Buffer manipulation
    public static void luaL_addchar(MemorySegment B, byte c) {
        if (luaL_Buffer.n$get(B) >= luaL_Buffer.size$get(B))
            luaL_prepbuffsize((B), 1);
        MemoryAccess.setByte(luaL_Buffer.b$get(B).addOffset((long)luaL_Buffer.n$VH().getAndAdd(B, 1L)).asSegment(1, ResourceScope.globalScope()), c);
    }
    public static void luaL_addsize(MemorySegment B, long s) {
        luaL_Buffer.n$set(B, luaL_Buffer.n$get(B)+s);
    }
    // end of manually inserted macro translations
    public static MethodHandle luaL_buffinit$MH() {
        return RuntimeHelper.requireNonNull(constants$25.luaL_buffinit$MH,"luaL_buffinit");
    }
    public static void luaL_buffinit ( Addressable L,  Addressable B) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.luaL_buffinit$MH, "luaL_buffinit");
        try {
            mh$.invokeExact(L.address(), B.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_prepbuffsize$MH() {
        return RuntimeHelper.requireNonNull(constants$25.luaL_prepbuffsize$MH,"luaL_prepbuffsize");
    }
    public static MemoryAddress luaL_prepbuffsize ( Addressable B,  long sz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.luaL_prepbuffsize$MH, "luaL_prepbuffsize");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(B.address(), sz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_addlstring$MH() {
        return RuntimeHelper.requireNonNull(constants$25.luaL_addlstring$MH,"luaL_addlstring");
    }
    public static void luaL_addlstring ( Addressable B,  Addressable s,  long l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.luaL_addlstring$MH, "luaL_addlstring");
        try {
            mh$.invokeExact(B.address(), s.address(), l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_addstring$MH() {
        return RuntimeHelper.requireNonNull(constants$25.luaL_addstring$MH,"luaL_addstring");
    }
    public static void luaL_addstring ( Addressable B,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.luaL_addstring$MH, "luaL_addstring");
        try {
            mh$.invokeExact(B.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_addvalue$MH() {
        return RuntimeHelper.requireNonNull(constants$25.luaL_addvalue$MH,"luaL_addvalue");
    }
    public static void luaL_addvalue ( Addressable B) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.luaL_addvalue$MH, "luaL_addvalue");
        try {
            mh$.invokeExact(B.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_pushresult$MH() {
        return RuntimeHelper.requireNonNull(constants$26.luaL_pushresult$MH,"luaL_pushresult");
    }
    public static void luaL_pushresult ( Addressable B) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.luaL_pushresult$MH, "luaL_pushresult");
        try {
            mh$.invokeExact(B.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_pushresultsize$MH() {
        return RuntimeHelper.requireNonNull(constants$26.luaL_pushresultsize$MH,"luaL_pushresultsize");
    }
    public static void luaL_pushresultsize ( Addressable B,  long sz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.luaL_pushresultsize$MH, "luaL_pushresultsize");
        try {
            mh$.invokeExact(B.address(), sz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle luaL_buffinitsize$MH() {
        return RuntimeHelper.requireNonNull(constants$26.luaL_buffinitsize$MH,"luaL_buffinitsize");
    }
    public static MemoryAddress luaL_buffinitsize ( Addressable L,  Addressable B,  long sz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.luaL_buffinitsize$MH, "luaL_buffinitsize");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(L.address(), B.address(), sz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    // manually inserted macro translations
    public static MemoryAddress luaL_prepbuffer(Addressable B) {
        return luaL_prepbuffsize(B, LUAL_BUFFERSIZE());
    }
    // end of manually inserted macro translations
    public static MethodHandle eris_dump$MH() {
        return RuntimeHelper.requireNonNull(constants$26.eris_dump$MH,"eris_dump");
    }
    public static void eris_dump ( Addressable L,  Addressable writer,  Addressable ud) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.eris_dump$MH, "eris_dump");
        try {
            mh$.invokeExact(L.address(), writer.address(), ud.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle eris_undump$MH() {
        return RuntimeHelper.requireNonNull(constants$26.eris_undump$MH,"eris_undump");
    }
    public static void eris_undump ( Addressable L,  Addressable reader,  Addressable ud) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.eris_undump$MH, "eris_undump");
        try {
            mh$.invokeExact(L.address(), reader.address(), ud.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle eris_persist$MH() {
        return RuntimeHelper.requireNonNull(constants$26.eris_persist$MH,"eris_persist");
    }
    public static void eris_persist ( Addressable L,  int perms,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.eris_persist$MH, "eris_persist");
        try {
            mh$.invokeExact(L.address(), perms, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle eris_unpersist$MH() {
        return RuntimeHelper.requireNonNull(constants$27.eris_unpersist$MH,"eris_unpersist");
    }
    public static void eris_unpersist ( Addressable L,  int perms,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.eris_unpersist$MH, "eris_unpersist");
        try {
            mh$.invokeExact(L.address(), perms, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle eris_get_setting$MH() {
        return RuntimeHelper.requireNonNull(constants$27.eris_get_setting$MH,"eris_get_setting");
    }
    public static void eris_get_setting ( Addressable L,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.eris_get_setting$MH, "eris_get_setting");
        try {
            mh$.invokeExact(L.address(), name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle eris_set_setting$MH() {
        return RuntimeHelper.requireNonNull(constants$27.eris_set_setting$MH,"eris_set_setting");
    }
    public static void eris_set_setting ( Addressable L,  Addressable name,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.eris_set_setting$MH, "eris_set_setting");
        try {
            mh$.invokeExact(L.address(), name.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LUA_INT_TYPE() {
        return (int)3L;
    }
    public static int LUA_FLOAT_TYPE() {
        return (int)2L;
    }
    public static MemorySegment LUA_PATH_SEP() {
        return constants$27.LUA_PATH_SEP$SEGMENT;
    }
    public static MemorySegment LUA_PATH_MARK() {
        return constants$27.LUA_PATH_MARK$SEGMENT;
    }
    public static MemorySegment LUA_VDIR() {
        return constants$27.LUA_VDIR$SEGMENT;
    }
    public static MemorySegment LUA_NUMBER_FRMLEN() {
        return constants$28.LUA_NUMBER_FRMLEN$SEGMENT;
    }
    public static MemorySegment LUA_NUMBER_FMT() {
        return constants$28.LUA_NUMBER_FMT$SEGMENT;
    }
    public static MemorySegment LUA_INTEGER_FMT() {
        return constants$28.LUA_INTEGER_FMT$SEGMENT;
    }
    public static MemorySegment LUA_INTEGER_FRMLEN() {
        return constants$28.LUA_INTEGER_FRMLEN$SEGMENT;
    }
    public static long LUA_MAXINTEGER() {
        return 9223372036854775807L;
    }
    public static long LUA_MININTEGER() {
        return -9223372036854775808L;
    }
    public static long LUA_EXTRASPACE() {
        return 8L;
    }
    public static int LUAL_BUFFERSIZE() {
        return (int)8192L;
    }
    public static MemorySegment LUA_QS() {
        return constants$28.LUA_QS$SEGMENT;
    }
    public static MemorySegment LUA_VERSION_MAJOR() {
        return constants$28.LUA_VERSION_MAJOR$SEGMENT;
    }
    public static MemorySegment LUA_VERSION_MINOR() {
        return constants$29.LUA_VERSION_MINOR$SEGMENT;
    }
    public static MemorySegment LUA_VERSION_RELEASE() {
        return constants$29.LUA_VERSION_RELEASE$SEGMENT;
    }
    public static MemorySegment LUA_VERSION() {
        return constants$29.LUA_VERSION$SEGMENT;
    }
    public static MemorySegment LUA_RELEASE() {
        return constants$29.LUA_RELEASE$SEGMENT;
    }
    public static MemorySegment LUA_COPYRIGHT() {
        return constants$29.LUA_COPYRIGHT$SEGMENT;
    }
    public static MemorySegment LUA_AUTHORS() {
        return constants$29.LUA_AUTHORS$SEGMENT;
    }
    public static MemorySegment LUA_SIGNATURE() {
        return constants$30.LUA_SIGNATURE$SEGMENT;
    }
    public static int LUA_MULTRET() {
        return (int)-1L;
    }
    public static int LUA_REGISTRYINDEX() {
        return (int)-1001000L;
    }
    public static int LUA_TNONE() {
        return (int)-1L;
    }
    public static int LUA_RIDX_LAST() {
        return (int)2L;
    }
    public static int LUA_MASKCALL() {
        return (int)1L;
    }
    public static int LUA_MASKRET() {
        return (int)2L;
    }
    public static int LUA_MASKLINE() {
        return (int)4L;
    }
    public static int LUA_MASKCOUNT() {
        return (int)8L;
    }
    public static MemorySegment LUA_VERSUFFIX() {
        return constants$30.LUA_VERSUFFIX$SEGMENT;
    }
    public static MemorySegment LUA_COLIBNAME() {
        return constants$30.LUA_COLIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_TABLIBNAME() {
        return constants$30.LUA_TABLIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_IOLIBNAME() {
        return constants$30.LUA_IOLIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_OSLIBNAME() {
        return constants$30.LUA_OSLIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_STRLIBNAME() {
        return constants$31.LUA_STRLIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_UTF8LIBNAME() {
        return constants$31.LUA_UTF8LIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_BITLIBNAME() {
        return constants$31.LUA_BITLIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_MATHLIBNAME() {
        return constants$31.LUA_MATHLIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_DBLIBNAME() {
        return constants$31.LUA_DBLIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_LOADLIBNAME() {
        return constants$31.LUA_LOADLIBNAME$SEGMENT;
    }
    public static MemorySegment LUA_ERISLIBNAME() {
        return constants$32.LUA_ERISLIBNAME$SEGMENT;
    }
    public static int LUA_ERRFILE() {
        return (int)7L;
    }
    public static MemorySegment LUA_LOADED_TABLE() {
        return constants$32.LUA_LOADED_TABLE$SEGMENT;
    }
    public static MemorySegment LUA_PRELOAD_TABLE() {
        return constants$32.LUA_PRELOAD_TABLE$SEGMENT;
    }
    public static long LUAL_NUMSIZES() {
        return 136L;
    }
    public static int LUA_NOREF() {
        return (int)-2L;
    }
    public static int LUA_REFNIL() {
        return (int)-1L;
    }
    public static MemorySegment LUA_FILEHANDLE() {
        return constants$32.LUA_FILEHANDLE$SEGMENT;
    }
    public static MemorySegment ERIS_VERSION_MAJOR() {
        return constants$32.ERIS_VERSION_MAJOR$SEGMENT;
    }
    public static MemorySegment ERIS_VERSION_MINOR() {
        return constants$32.ERIS_VERSION_MINOR$SEGMENT;
    }
    public static MemorySegment ERIS_VERSION_RELEASE() {
        return constants$33.ERIS_VERSION_RELEASE$SEGMENT;
    }
}



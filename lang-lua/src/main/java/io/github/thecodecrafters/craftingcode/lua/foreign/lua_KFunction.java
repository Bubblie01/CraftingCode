// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface lua_KFunction {

    int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, long x2);
    static MemoryAddress allocate(lua_KFunction fi) {
        return RuntimeHelper.upcallStub(lua_KFunction.class, fi, constants$0.lua_KFunction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IJ)I");
    }
    static MemoryAddress allocate(lua_KFunction fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(lua_KFunction.class, fi, constants$0.lua_KFunction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IJ)I", scope);
    }
    static lua_KFunction ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, int x1, long x2) -> {
            try {
                return (int)constants$0.lua_KFunction$MH.invokeExact((Addressable)addr, x0, x1, x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}



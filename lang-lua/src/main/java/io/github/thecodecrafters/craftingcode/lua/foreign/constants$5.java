// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;

import static io.github.thecodecrafters.craftingcode.lua.foreign.Lua.lua_Integer;
import static io.github.thecodecrafters.craftingcode.lua.foreign.Lua.lua_Number;
import static jdk.incubator.foreign.CLinker.*;
import static jdk.incubator.foreign.MemoryLayouts.ADDRESS;

class constants$5 {

    static final FunctionDescriptor lua_tonumberx$FUNC = FunctionDescriptor.of(lua_Number,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle lua_tonumberx$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_tonumberx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)D",
        constants$5.lua_tonumberx$FUNC, false
    );
    static final FunctionDescriptor lua_tointegerx$FUNC = FunctionDescriptor.of(lua_Integer,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle lua_tointegerx$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_tointegerx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)J",
        constants$5.lua_tointegerx$FUNC, false
    );
    static final FunctionDescriptor lua_toboolean$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_toboolean$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_toboolean",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$5.lua_toboolean$FUNC, false
    );
    static final FunctionDescriptor lua_tolstring$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle lua_tolstring$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_tolstring",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$5.lua_tolstring$FUNC, false
    );
    static final FunctionDescriptor lua_rawlen$FUNC = FunctionDescriptor.of(ADDRESS,
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_rawlen$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_rawlen",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        constants$5.lua_rawlen$FUNC, false
    );
    static final FunctionDescriptor lua_tocfunction$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_tocfunction$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_tocfunction",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        constants$5.lua_tocfunction$FUNC, false
    );
}



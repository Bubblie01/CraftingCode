// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
import static jdk.incubator.foreign.MemoryLayouts.ADDRESS;

class constants$23 {

    static final FunctionDescriptor luaL_execresult$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle luaL_execresult$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_execresult",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$23.luaL_execresult$FUNC, false
    );
    static final FunctionDescriptor luaL_ref$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle luaL_ref$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_ref",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$23.luaL_ref$FUNC, false
    );
    static final FunctionDescriptor luaL_unref$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle luaL_unref$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_unref",
        "(Ljdk/incubator/foreign/MemoryAddress;II)V",
        constants$23.luaL_unref$FUNC, false
    );
    static final FunctionDescriptor luaL_loadfilex$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle luaL_loadfilex$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_loadfilex",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$23.luaL_loadfilex$FUNC, false
    );
    static final FunctionDescriptor luaL_loadbufferx$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        ADDRESS,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle luaL_loadbufferx$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_loadbufferx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$23.luaL_loadbufferx$FUNC, false
    );
    static final FunctionDescriptor luaL_loadstring$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle luaL_loadstring$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaL_loadstring",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$23.luaL_loadstring$FUNC, false
    );
}



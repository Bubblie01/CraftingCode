// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$3 {

    static final FunctionDescriptor lua_pushvalue$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_pushvalue$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_pushvalue",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$3.lua_pushvalue$FUNC, false
    );
    static final FunctionDescriptor lua_rotate$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle lua_rotate$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_rotate",
        "(Ljdk/incubator/foreign/MemoryAddress;II)V",
        constants$3.lua_rotate$FUNC, false
    );
    static final FunctionDescriptor lua_copy$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle lua_copy$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_copy",
        "(Ljdk/incubator/foreign/MemoryAddress;II)V",
        constants$3.lua_copy$FUNC, false
    );
    static final FunctionDescriptor lua_checkstack$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_checkstack$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_checkstack",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$3.lua_checkstack$FUNC, false
    );
    static final FunctionDescriptor lua_xmove$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_xmove$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_xmove",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        constants$3.lua_xmove$FUNC, false
    );
    static final FunctionDescriptor lua_isnumber$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_isnumber$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_isnumber",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$3.lua_isnumber$FUNC, false
    );
}



// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$13 {

    static final FunctionDescriptor lua_resume$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_resume$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_resume",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$13.lua_resume$FUNC, false
    );
    static final FunctionDescriptor lua_status$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle lua_status$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_status",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$13.lua_status$FUNC, false
    );
    static final FunctionDescriptor lua_isyieldable$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle lua_isyieldable$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_isyieldable",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$13.lua_isyieldable$FUNC, false
    );
    static final FunctionDescriptor lua_gc$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle lua_gc$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_gc",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        constants$13.lua_gc$FUNC, false
    );
    static final FunctionDescriptor lua_error$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle lua_error$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_error",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$13.lua_error$FUNC, false
    );
    static final FunctionDescriptor lua_next$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle lua_next$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_next",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$13.lua_next$FUNC, false
    );
}



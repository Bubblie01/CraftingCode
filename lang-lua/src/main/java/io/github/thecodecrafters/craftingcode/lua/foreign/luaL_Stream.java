// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class luaL_Stream {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("f"),
        C_POINTER.withName("closef")
    ).withName("luaL_Stream");
    public static MemoryLayout $LAYOUT() {
        return luaL_Stream.$struct$LAYOUT;
    }
    static final VarHandle f$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("f")));
    public static VarHandle f$VH() {
        return luaL_Stream.f$VH;
    }
    public static MemoryAddress f$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)luaL_Stream.f$VH.get(seg);
    }
    public static void f$set( MemorySegment seg, MemoryAddress x) {
        luaL_Stream.f$VH.set(seg, x);
    }
    public static MemoryAddress f$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)luaL_Stream.f$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f$set(MemorySegment seg, long index, MemoryAddress x) {
        luaL_Stream.f$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle closef$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("closef")));
    public static VarHandle closef$VH() {
        return luaL_Stream.closef$VH;
    }
    public static MemoryAddress closef$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)luaL_Stream.closef$VH.get(seg);
    }
    public static void closef$set( MemorySegment seg, MemoryAddress x) {
        luaL_Stream.closef$VH.set(seg, x);
    }
    public static MemoryAddress closef$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)luaL_Stream.closef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void closef$set(MemorySegment seg, long index, MemoryAddress x) {
        luaL_Stream.closef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lua_CFunction closef (MemorySegment segment) {
        return lua_CFunction.ofAddress(closef$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}



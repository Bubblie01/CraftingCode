// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class lua_Debug {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("event"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("name"),
        C_POINTER.withName("namewhat"),
        C_POINTER.withName("what"),
        C_POINTER.withName("source"),
        C_INT.withName("currentline"),
        C_INT.withName("linedefined"),
        C_INT.withName("lastlinedefined"),
        C_CHAR.withName("nups"),
        C_CHAR.withName("nparams"),
        C_CHAR.withName("isvararg"),
        C_CHAR.withName("istailcall"),
        MemoryLayout.sequenceLayout(60, C_CHAR).withName("short_src"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("i_ci")
    ).withName("lua_Debug");
    public static MemoryLayout $LAYOUT() {
        return lua_Debug.$struct$LAYOUT;
    }
    static final VarHandle event$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("event"));
    public static VarHandle event$VH() {
        return lua_Debug.event$VH;
    }
    public static int event$get(MemorySegment seg) {
        return (int)lua_Debug.event$VH.get(seg);
    }
    public static void event$set( MemorySegment seg, int x) {
        lua_Debug.event$VH.set(seg, x);
    }
    public static int event$get(MemorySegment seg, long index) {
        return (int)lua_Debug.event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void event$set(MemorySegment seg, long index, int x) {
        lua_Debug.event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("name")));
    public static VarHandle name$VH() {
        return lua_Debug.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        lua_Debug.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        lua_Debug.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle namewhat$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("namewhat")));
    public static VarHandle namewhat$VH() {
        return lua_Debug.namewhat$VH;
    }
    public static MemoryAddress namewhat$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.namewhat$VH.get(seg);
    }
    public static void namewhat$set( MemorySegment seg, MemoryAddress x) {
        lua_Debug.namewhat$VH.set(seg, x);
    }
    public static MemoryAddress namewhat$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.namewhat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void namewhat$set(MemorySegment seg, long index, MemoryAddress x) {
        lua_Debug.namewhat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle what$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("what")));
    public static VarHandle what$VH() {
        return lua_Debug.what$VH;
    }
    public static MemoryAddress what$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.what$VH.get(seg);
    }
    public static void what$set( MemorySegment seg, MemoryAddress x) {
        lua_Debug.what$VH.set(seg, x);
    }
    public static MemoryAddress what$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.what$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void what$set(MemorySegment seg, long index, MemoryAddress x) {
        lua_Debug.what$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle source$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("source")));
    public static VarHandle source$VH() {
        return lua_Debug.source$VH;
    }
    public static MemoryAddress source$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.source$VH.get(seg);
    }
    public static void source$set( MemorySegment seg, MemoryAddress x) {
        lua_Debug.source$VH.set(seg, x);
    }
    public static MemoryAddress source$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.source$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void source$set(MemorySegment seg, long index, MemoryAddress x) {
        lua_Debug.source$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle currentline$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("currentline"));
    public static VarHandle currentline$VH() {
        return lua_Debug.currentline$VH;
    }
    public static int currentline$get(MemorySegment seg) {
        return (int)lua_Debug.currentline$VH.get(seg);
    }
    public static void currentline$set( MemorySegment seg, int x) {
        lua_Debug.currentline$VH.set(seg, x);
    }
    public static int currentline$get(MemorySegment seg, long index) {
        return (int)lua_Debug.currentline$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void currentline$set(MemorySegment seg, long index, int x) {
        lua_Debug.currentline$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle linedefined$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("linedefined"));
    public static VarHandle linedefined$VH() {
        return lua_Debug.linedefined$VH;
    }
    public static int linedefined$get(MemorySegment seg) {
        return (int)lua_Debug.linedefined$VH.get(seg);
    }
    public static void linedefined$set( MemorySegment seg, int x) {
        lua_Debug.linedefined$VH.set(seg, x);
    }
    public static int linedefined$get(MemorySegment seg, long index) {
        return (int)lua_Debug.linedefined$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void linedefined$set(MemorySegment seg, long index, int x) {
        lua_Debug.linedefined$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lastlinedefined$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("lastlinedefined"));
    public static VarHandle lastlinedefined$VH() {
        return lua_Debug.lastlinedefined$VH;
    }
    public static int lastlinedefined$get(MemorySegment seg) {
        return (int)lua_Debug.lastlinedefined$VH.get(seg);
    }
    public static void lastlinedefined$set( MemorySegment seg, int x) {
        lua_Debug.lastlinedefined$VH.set(seg, x);
    }
    public static int lastlinedefined$get(MemorySegment seg, long index) {
        return (int)lua_Debug.lastlinedefined$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lastlinedefined$set(MemorySegment seg, long index, int x) {
        lua_Debug.lastlinedefined$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nups$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("nups"));
    public static VarHandle nups$VH() {
        return lua_Debug.nups$VH;
    }
    public static byte nups$get(MemorySegment seg) {
        return (byte)lua_Debug.nups$VH.get(seg);
    }
    public static void nups$set( MemorySegment seg, byte x) {
        lua_Debug.nups$VH.set(seg, x);
    }
    public static byte nups$get(MemorySegment seg, long index) {
        return (byte)lua_Debug.nups$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nups$set(MemorySegment seg, long index, byte x) {
        lua_Debug.nups$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nparams$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("nparams"));
    public static VarHandle nparams$VH() {
        return lua_Debug.nparams$VH;
    }
    public static byte nparams$get(MemorySegment seg) {
        return (byte)lua_Debug.nparams$VH.get(seg);
    }
    public static void nparams$set( MemorySegment seg, byte x) {
        lua_Debug.nparams$VH.set(seg, x);
    }
    public static byte nparams$get(MemorySegment seg, long index) {
        return (byte)lua_Debug.nparams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nparams$set(MemorySegment seg, long index, byte x) {
        lua_Debug.nparams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle isvararg$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("isvararg"));
    public static VarHandle isvararg$VH() {
        return lua_Debug.isvararg$VH;
    }
    public static byte isvararg$get(MemorySegment seg) {
        return (byte)lua_Debug.isvararg$VH.get(seg);
    }
    public static void isvararg$set( MemorySegment seg, byte x) {
        lua_Debug.isvararg$VH.set(seg, x);
    }
    public static byte isvararg$get(MemorySegment seg, long index) {
        return (byte)lua_Debug.isvararg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void isvararg$set(MemorySegment seg, long index, byte x) {
        lua_Debug.isvararg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle istailcall$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("istailcall"));
    public static VarHandle istailcall$VH() {
        return lua_Debug.istailcall$VH;
    }
    public static byte istailcall$get(MemorySegment seg) {
        return (byte)lua_Debug.istailcall$VH.get(seg);
    }
    public static void istailcall$set( MemorySegment seg, byte x) {
        lua_Debug.istailcall$VH.set(seg, x);
    }
    public static byte istailcall$get(MemorySegment seg, long index) {
        return (byte)lua_Debug.istailcall$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void istailcall$set(MemorySegment seg, long index, byte x) {
        lua_Debug.istailcall$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment short_src$slice(MemorySegment seg) {
        return seg.asSlice(56, 60);
    }
    static final VarHandle i_ci$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("i_ci")));
    public static VarHandle i_ci$VH() {
        return lua_Debug.i_ci$VH;
    }
    public static MemoryAddress i_ci$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.i_ci$VH.get(seg);
    }
    public static void i_ci$set( MemorySegment seg, MemoryAddress x) {
        lua_Debug.i_ci$VH.set(seg, x);
    }
    public static MemoryAddress i_ci$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)lua_Debug.i_ci$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void i_ci$set(MemorySegment seg, long index, MemoryAddress x) {
        lua_Debug.i_ci$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}



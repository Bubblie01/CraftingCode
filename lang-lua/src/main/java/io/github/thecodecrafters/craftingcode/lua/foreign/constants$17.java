// Generated by jextract

package io.github.thecodecrafters.craftingcode.lua.foreign;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$17 {

    static final FunctionDescriptor lua_gethookcount$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle lua_gethookcount$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "lua_gethookcount",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$17.lua_gethookcount$FUNC, false
    );
    static final FunctionDescriptor luaopen_base$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle luaopen_base$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaopen_base",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$17.luaopen_base$FUNC, false
    );
    static final FunctionDescriptor luaopen_coroutine$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle luaopen_coroutine$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaopen_coroutine",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$17.luaopen_coroutine$FUNC, false
    );
    static final FunctionDescriptor luaopen_table$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle luaopen_table$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaopen_table",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$17.luaopen_table$FUNC, false
    );
    static final FunctionDescriptor luaopen_io$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle luaopen_io$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaopen_io",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$17.luaopen_io$FUNC, false
    );
    static final FunctionDescriptor luaopen_os$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle luaopen_os$MH = RuntimeHelper.downcallHandle(
        Lua.LIBRARIES, "luaopen_os",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$17.luaopen_os$FUNC, false
    );
}


